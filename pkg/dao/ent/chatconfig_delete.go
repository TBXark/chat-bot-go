// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TBXark/chat-bot-go/pkg/dao/ent/chatconfig"
	"github.com/TBXark/chat-bot-go/pkg/dao/ent/predicate"
)

// ChatConfigDelete is the builder for deleting a ChatConfig entity.
type ChatConfigDelete struct {
	config
	hooks    []Hook
	mutation *ChatConfigMutation
}

// Where appends a list predicates to the ChatConfigDelete builder.
func (ccd *ChatConfigDelete) Where(ps ...predicate.ChatConfig) *ChatConfigDelete {
	ccd.mutation.Where(ps...)
	return ccd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccd *ChatConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ChatConfigMutation](ctx, ccd.sqlExec, ccd.mutation, ccd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccd *ChatConfigDelete) ExecX(ctx context.Context) int {
	n, err := ccd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccd *ChatConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(chatconfig.Table, sqlgraph.NewFieldSpec(chatconfig.FieldID, field.TypeInt))
	if ps := ccd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccd.mutation.done = true
	return affected, err
}

// ChatConfigDeleteOne is the builder for deleting a single ChatConfig entity.
type ChatConfigDeleteOne struct {
	ccd *ChatConfigDelete
}

// Where appends a list predicates to the ChatConfigDelete builder.
func (ccdo *ChatConfigDeleteOne) Where(ps ...predicate.ChatConfig) *ChatConfigDeleteOne {
	ccdo.ccd.mutation.Where(ps...)
	return ccdo
}

// Exec executes the deletion query.
func (ccdo *ChatConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := ccdo.ccd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{chatconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccdo *ChatConfigDeleteOne) ExecX(ctx context.Context) {
	if err := ccdo.Exec(ctx); err != nil {
		panic(err)
	}
}
