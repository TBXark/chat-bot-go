// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/TBXark/chat-bot-go/pkg/dao/ent/chathistory"
)

// ChatHistory is the model entity for the ChatHistory schema.
type ChatHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// Content holds the value of the "content" field.
	Content      string `json:"content,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chathistory.FieldID, chathistory.FieldChatID:
			values[i] = new(sql.NullInt64)
		case chathistory.FieldContent:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatHistory fields.
func (ch *ChatHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chathistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ch.ID = int(value.Int64)
		case chathistory.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				ch.ChatID = value.Int64
			}
		case chathistory.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ch.Content = value.String
			}
		default:
			ch.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatHistory.
// This includes values selected through modifiers, order, etc.
func (ch *ChatHistory) Value(name string) (ent.Value, error) {
	return ch.selectValues.Get(name)
}

// Update returns a builder for updating this ChatHistory.
// Note that you need to call ChatHistory.Unwrap() before calling this method if this ChatHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ch *ChatHistory) Update() *ChatHistoryUpdateOne {
	return NewChatHistoryClient(ch.config).UpdateOne(ch)
}

// Unwrap unwraps the ChatHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ch *ChatHistory) Unwrap() *ChatHistory {
	_tx, ok := ch.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatHistory is not a transactional entity")
	}
	ch.config.driver = _tx.drv
	return ch
}

// String implements the fmt.Stringer.
func (ch *ChatHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ChatHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ch.ID))
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", ch.ChatID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ch.Content)
	builder.WriteByte(')')
	return builder.String()
}

// ChatHistories is a parsable slice of ChatHistory.
type ChatHistories []*ChatHistory
