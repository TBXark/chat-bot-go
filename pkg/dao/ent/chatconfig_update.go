// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TBXark/chat-bot-go/pkg/dao/ent/chatconfig"
	"github.com/TBXark/chat-bot-go/pkg/dao/ent/predicate"
)

// ChatConfigUpdate is the builder for updating ChatConfig entities.
type ChatConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ChatConfigMutation
}

// Where appends a list predicates to the ChatConfigUpdate builder.
func (ccu *ChatConfigUpdate) Where(ps ...predicate.ChatConfig) *ChatConfigUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetChatID sets the "chat_id" field.
func (ccu *ChatConfigUpdate) SetChatID(i int64) *ChatConfigUpdate {
	ccu.mutation.ResetChatID()
	ccu.mutation.SetChatID(i)
	return ccu
}

// AddChatID adds i to the "chat_id" field.
func (ccu *ChatConfigUpdate) AddChatID(i int64) *ChatConfigUpdate {
	ccu.mutation.AddChatID(i)
	return ccu
}

// SetJSON sets the "json" field.
func (ccu *ChatConfigUpdate) SetJSON(s string) *ChatConfigUpdate {
	ccu.mutation.SetJSON(s)
	return ccu
}

// Mutation returns the ChatConfigMutation object of the builder.
func (ccu *ChatConfigUpdate) Mutation() *ChatConfigMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *ChatConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ChatConfigMutation](ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *ChatConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *ChatConfigUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *ChatConfigUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccu *ChatConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chatconfig.Table, chatconfig.Columns, sqlgraph.NewFieldSpec(chatconfig.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.ChatID(); ok {
		_spec.SetField(chatconfig.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := ccu.mutation.AddedChatID(); ok {
		_spec.AddField(chatconfig.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := ccu.mutation.JSON(); ok {
		_spec.SetField(chatconfig.FieldJSON, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// ChatConfigUpdateOne is the builder for updating a single ChatConfig entity.
type ChatConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatConfigMutation
}

// SetChatID sets the "chat_id" field.
func (ccuo *ChatConfigUpdateOne) SetChatID(i int64) *ChatConfigUpdateOne {
	ccuo.mutation.ResetChatID()
	ccuo.mutation.SetChatID(i)
	return ccuo
}

// AddChatID adds i to the "chat_id" field.
func (ccuo *ChatConfigUpdateOne) AddChatID(i int64) *ChatConfigUpdateOne {
	ccuo.mutation.AddChatID(i)
	return ccuo
}

// SetJSON sets the "json" field.
func (ccuo *ChatConfigUpdateOne) SetJSON(s string) *ChatConfigUpdateOne {
	ccuo.mutation.SetJSON(s)
	return ccuo
}

// Mutation returns the ChatConfigMutation object of the builder.
func (ccuo *ChatConfigUpdateOne) Mutation() *ChatConfigMutation {
	return ccuo.mutation
}

// Where appends a list predicates to the ChatConfigUpdate builder.
func (ccuo *ChatConfigUpdateOne) Where(ps ...predicate.ChatConfig) *ChatConfigUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *ChatConfigUpdateOne) Select(field string, fields ...string) *ChatConfigUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated ChatConfig entity.
func (ccuo *ChatConfigUpdateOne) Save(ctx context.Context) (*ChatConfig, error) {
	return withHooks[*ChatConfig, ChatConfigMutation](ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *ChatConfigUpdateOne) SaveX(ctx context.Context) *ChatConfig {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *ChatConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *ChatConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccuo *ChatConfigUpdateOne) sqlSave(ctx context.Context) (_node *ChatConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(chatconfig.Table, chatconfig.Columns, sqlgraph.NewFieldSpec(chatconfig.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatconfig.FieldID)
		for _, f := range fields {
			if !chatconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.ChatID(); ok {
		_spec.SetField(chatconfig.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := ccuo.mutation.AddedChatID(); ok {
		_spec.AddField(chatconfig.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := ccuo.mutation.JSON(); ok {
		_spec.SetField(chatconfig.FieldJSON, field.TypeString, value)
	}
	_node = &ChatConfig{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
