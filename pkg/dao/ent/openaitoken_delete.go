// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TBXark/chat-bot-go/pkg/dao/ent/openaitoken"
	"github.com/TBXark/chat-bot-go/pkg/dao/ent/predicate"
)

// OpenAITokenDelete is the builder for deleting a OpenAIToken entity.
type OpenAITokenDelete struct {
	config
	hooks    []Hook
	mutation *OpenAITokenMutation
}

// Where appends a list predicates to the OpenAITokenDelete builder.
func (oatd *OpenAITokenDelete) Where(ps ...predicate.OpenAIToken) *OpenAITokenDelete {
	oatd.mutation.Where(ps...)
	return oatd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oatd *OpenAITokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, OpenAITokenMutation](ctx, oatd.sqlExec, oatd.mutation, oatd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oatd *OpenAITokenDelete) ExecX(ctx context.Context) int {
	n, err := oatd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oatd *OpenAITokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(openaitoken.Table, sqlgraph.NewFieldSpec(openaitoken.FieldID, field.TypeInt))
	if ps := oatd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oatd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oatd.mutation.done = true
	return affected, err
}

// OpenAITokenDeleteOne is the builder for deleting a single OpenAIToken entity.
type OpenAITokenDeleteOne struct {
	oatd *OpenAITokenDelete
}

// Where appends a list predicates to the OpenAITokenDelete builder.
func (oatdo *OpenAITokenDeleteOne) Where(ps ...predicate.OpenAIToken) *OpenAITokenDeleteOne {
	oatdo.oatd.mutation.Where(ps...)
	return oatdo
}

// Exec executes the deletion query.
func (oatdo *OpenAITokenDeleteOne) Exec(ctx context.Context) error {
	n, err := oatdo.oatd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{openaitoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oatdo *OpenAITokenDeleteOne) ExecX(ctx context.Context) {
	if err := oatdo.Exec(ctx); err != nil {
		panic(err)
	}
}
