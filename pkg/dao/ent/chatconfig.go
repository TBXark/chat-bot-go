// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/TBXark/chat-bot-go/pkg/dao/ent/chatconfig"
)

// ChatConfig is the model entity for the ChatConfig schema.
type ChatConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// JSON holds the value of the "json" field.
	JSON         string `json:"json,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatconfig.FieldID, chatconfig.FieldChatID:
			values[i] = new(sql.NullInt64)
		case chatconfig.FieldJSON:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatConfig fields.
func (cc *ChatConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case chatconfig.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				cc.ChatID = value.Int64
			}
		case chatconfig.FieldJSON:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field json", values[i])
			} else if value.Valid {
				cc.JSON = value.String
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatConfig.
// This includes values selected through modifiers, order, etc.
func (cc *ChatConfig) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// Update returns a builder for updating this ChatConfig.
// Note that you need to call ChatConfig.Unwrap() before calling this method if this ChatConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *ChatConfig) Update() *ChatConfigUpdateOne {
	return NewChatConfigClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the ChatConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *ChatConfig) Unwrap() *ChatConfig {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatConfig is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *ChatConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ChatConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", cc.ChatID))
	builder.WriteString(", ")
	builder.WriteString("json=")
	builder.WriteString(cc.JSON)
	builder.WriteByte(')')
	return builder.String()
}

// ChatConfigs is a parsable slice of ChatConfig.
type ChatConfigs []*ChatConfig
